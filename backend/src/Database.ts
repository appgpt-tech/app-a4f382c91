//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { InventoryItemsEntity } from './db/InventoryItems.entity';
import { DonationsEntity } from './db/Donations.entity';
import { UsersEntity } from './db/Users.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      InventoryItemsEntity,
      DonationsEntity,
      UsersEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      InventoryItems: [
        { itemName: 'itemName 1', quantity: 1, status: 'status 1', id: 38 },
        { itemName: 'itemName 2', quantity: 2, status: 'status 2', id: 62 },
        { itemName: 'itemName 3', quantity: 3, status: 'status 3', id: 54 },
        { itemName: 'itemName 4', quantity: 4, status: 'status 4', id: 31 },
        { itemName: 'itemName 5', quantity: 5, status: 'status 5', id: 54 },
      ],
      Donations: [
        {
          donationId: 'donationId 1',
          itemName: 'itemName 1',
          quantityDonated: 1,
          id: 9,
        },
        {
          donationId: 'donationId 2',
          itemName: 'itemName 2',
          quantityDonated: 2,
          id: 52,
        },
        {
          donationId: 'donationId 3',
          itemName: 'itemName 3',
          quantityDonated: 3,
          id: 56,
        },
        {
          donationId: 'donationId 4',
          itemName: 'itemName 4',
          quantityDonated: 4,
          id: 23,
        },
        {
          donationId: 'donationId 5',
          itemName: 'itemName 5',
          quantityDonated: 5,
          id: 100,
        },
      ],
      Users: [
        { name: 'name 1', email: 'email 1', phoneNo: 'phoneNo 1', id: 30 },
        { name: 'name 2', email: 'email 2', phoneNo: 'phoneNo 2', id: 26 },
        { name: 'name 3', email: 'email 3', phoneNo: 'phoneNo 3', id: 2 },
        { name: 'name 4', email: 'email 4', phoneNo: 'phoneNo 4', id: 2 },
        { name: 'name 5', email: 'email 5', phoneNo: 'phoneNo 5', id: 89 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('InventoryItemsEntity', data.InventoryItems);
      await this.SeedResource('DonationsEntity', data.Donations);
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
